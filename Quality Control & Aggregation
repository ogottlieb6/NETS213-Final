pip install phyme
pip install git+git://github.com/quadrismegistus/prosodic.git
prosodic

pip install pronouncing



import pandas as pd
import csv
#from Phyme import Phyme
#import prosodic as p
import pronouncing as pron # uses




#check rhyme scheme
def rhyme_scheme(sonnet_text):
  lines = sonnet_text.split(",") #split sonnet by each line
  last_words = [word.split()[-1] for word in lines] #get last word in each line
  for i in range(len(last_words) - 2): #need ABAB rhyme scheme
    if last_words[i] not in pron.rhymes(last_words[i + 2]): #check if word rhymes with last word two lines ahead
      return False #if not, this is not a valid rhyme scheme
  
  return True #if all lines pass, this is a valid rhyme scheme

def syllable_count(word):
    word = word.lower()
    count = 0
    vowels = "aeiouy"
    if word[0] in vowels:
        count += 1
    for index in range(1, len(word)):
        if word[index] in vowels and word[index - 1] not in vowels:
            count += 1
    if word.endswith("e"):
        count -= 1
    if count == 0:
        count += 1
    return count

def quality_ctrl(sonnet_text):
  lines = sonnet_text.split(",")
  for line in lines: #make sure each line has 10 syllables
    total_syllables = 0
    for word in line:
      total_syllables += syllable_count(word)
    if total_syllables != 10:
      return False
   #finally, check rhyme scheme   
  return rhyme_scheme(sonnet_data)
  

#majority vote for the keyword data 
def majority_vote_keywords(keyword_data):
  df = pd.DataFrame(keyword_data) 
  count = {}
  for index, row in df.iterrows():
    for i in range(1,16):
        keyword = row["keyword_" + str(i)]
        rating = row["keyword_rating_" + str(i)]
        if keyword in count:
          count[keyword] = count[keyword] + rating
        else: 
         count[keyword] = count[keyword] + rating
  top_five= dict(sorted(count.iteritems(), key=operator.itemgetter(1), reverse=True)[:5])         
  return top_five



#majority vote for the sonnet data
def majority_vote_sonnet(sonnet_data):
  df = pd.DataFrame(keyword_data) 
  count = {}
    for index, row in df.iterrows():
      for i in range(1,6):
        sonnet = row["sonnet_" + str(i)]
        rating = row["rating_" + str(i)]
        if sonnet in count:
          if rating == "Yes":
            count[sonnet][0] = count[keyword] + 1
          elif rating == "No":
            count[sonnet][1] = count[keyword] + 1
        else: 
          if rating == "Yes":
            count[sonnet] = [1, 0]
          elif rating == "No":
            count[sonnet] = [0, 1]

    output = []
    for sonnet in count:
      if count[sonnet][0] > count[sonnet][1]:
        output.append(sonnet, count[sonnet][0])   
    output.sort(key=lambda tup: tup[1])
    return output[0]
